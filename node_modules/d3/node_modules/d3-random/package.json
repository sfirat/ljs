{
  "name": "d3-random",
  "version": "1.0.2",
  "description": "Generate random numbers from various distributions.",
  "keywords": [
    "d3",
    "d3-module",
    "random",
    "rng"
  ],
  "homepage": "https://d3js.org/d3-random/",
  "license": "BSD-3-Clause",
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "main": "build/d3-random.js",
  "module": "index",
  "jsnext:main": "index",
  "repository": {
    "type": "git",
    "url": "https://github.com/d3/d3-random.git"
  },
  "scripts": {
    "pretest": "rm -rf build && mkdir build && rollup --banner \"$(preamble)\" -f umd -n d3 -o build/d3-random.js -- index.js",
    "test": "tape 'test/**/*-test.js' && eslint index.js src",
    "prepublish": "npm run test && uglifyjs --preamble \"$(preamble)\" build/d3-random.js -c -m -o build/d3-random.min.js",
    "postpublish": "VERSION=`node -e 'console.log(require(\"./package.json\").version)'`; git push && git push --tags && cd ../d3.github.com && cp ../d3-random/build/d3-random.js d3-random.v1.js && cp ../d3-random/build/d3-random.min.js d3-random.v1.min.js && git add d3-random.v1.js d3-random.v1.min.js && git commit -m \"d3-random ${VERSION}\" && git push && cd - && zip -j build/d3-random.zip -- LICENSE README.md build/d3-random.js build/d3-random.min.js"
  },
  "devDependencies": {
    "d3-array": "1",
    "eslint": "3",
    "package-preamble": "0.0",
    "rollup": "0.36",
    "seedrandom": "2",
    "tape": "4",
    "uglify-js": "2"
  },
  "readme": "# d3-random\n\nGenerate random numbers from various distributions.\n\n## Installing\n\nIf you use NPM, `npm install d3-random`. Otherwise, download the [latest release](https://github.com/d3/d3-random/releases/latest). You can also load directly from [d3js.org](https://d3js.org), either as a [standalone library](https://d3js.org/d3-random.v1.min.js) or as part of [D3 4.0](https://github.com/d3/d3). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n```html\n<script src=\"https://d3js.org/d3-random.v1.min.js\"></script>\n<script>\n\nvar random = d3.randomUniform(1, 10);\n\n</script>\n```\n\n[Try d3-random in your browser.](https://tonicdev.com/npm/d3-random)\n\n## API Reference\n\n<a name=\"randomUniform\" href=\"#randomUniform\">#</a> d3.<b>randomUniform</b>([<i>min</i>, ][<i>max</i>]) [<>](https://github.com/d3/d3-random/blob/master/src/uniform.js \"Source\")\n\nReturns a function for generating random numbers with a [uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_\\(continuous\\)). The minimum allowed value of a returned number is *min*, and the maximum is *max*. If *min* is not specified, it defaults to 0; if *max* is not specified, it defaults to 1. For example:\n\n```js\nd3.randomUniform(6)(); // Returns a number greater than or equal to 0 and less than 6.\nd3.randomUniform(1, 5)(); // Returns a number greater than or equal to 1 and less than 5.\n```\n\nNote that you can also use the built-in [Math.random](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/random) to generate uniform distributions directly. For example, to generate a random integer between 0 and 99 (inclusive), you can say `Math.random() * 100 | 0`.\n\n<a name=\"randomNormal\" href=\"#randomNormal\">#</a> d3.<b>randomNormal</b>([<i>mu</i>][, <i>sigma</i>]) [<>](https://github.com/d3/d3-random/blob/master/src/normal.js \"Source\")\n\nReturns a function for generating random numbers with a [normal (Gaussian) distribution](https://en.wikipedia.org/wiki/Normal_distribution). The expected value of the generated numbers is *mu*, with the given standard deviation *sigma*. If *mu* is not specified, it defaults to 0; if *sigma* is not specified, it defaults to 1.\n\n<a name=\"randomLogNormal\" href=\"#randomLogNormal\">#</a> d3.<b>randomLogNormal</b>([<i>mu</i>][, <i>sigma</i>]) [<>](https://github.com/d3/d3-random/blob/master/src/logNormal.js \"Source\")\n\nReturns a function for generating random numbers with a [log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution). The expected value of the random variable’s natural logrithm is *mu*, with the given standard deviation *sigma*. If *mu* is not specified, it defaults to 0; if *sigma* is not specified, it defaults to 1.\n\n<a name=\"randomBates\" href=\"#randomBates\">#</a> d3.<b>randomBates</b>(<i>n</i>) [<>](https://github.com/d3/d3-random/blob/master/src/bates.js \"Source\")\n\nReturns a function for generating random numbers with a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution) with *n* independent variables.\n\n<a name=\"randomIrwinHall\" href=\"#randomIrwinHall\">#</a> d3.<b>randomIrwinHall</b>(<i>n</i>) [<>](https://github.com/d3/d3-random/blob/master/src/irwinHall.js \"Source\")\n\nReturns a function for generating random numbers with an [Irwin–Hall distribution](https://en.wikipedia.org/wiki/Irwin–Hall_distribution) with *n* independent variables.\n\n<a name=\"randomExponential\" href=\"#randomExponential\">#</a> d3.<b>randomExponential</b>(<i>lambda</i>) [<>](https://github.com/d3/d3-random/blob/master/src/exponential.js \"Source\")\n\nReturns a function for generating random numbers with an [exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution) with the rate *lambda*; equivalent to time between events in a [Poisson process](https://en.wikipedia.org/wiki/Poisson_point_process) with a mean of 1 / *lambda*. For example, exponential(1/40) generates random times between events where, on average, one event occurs every 40 units of time.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/d3/d3-random/issues"
  },
  "_id": "d3-random@1.0.2",
  "dist": {
    "shasum": "17785d69a336f15a4b0a2c64ce3aad6213ff93d7"
  },
  "_from": "d3-random@1.0.2",
  "_resolved": "https://registry.npmjs.org/d3-random/-/d3-random-1.0.2.tgz"
}
